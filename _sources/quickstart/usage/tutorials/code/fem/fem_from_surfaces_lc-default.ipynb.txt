{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Finite element model from surfaces with default mesh size\n",
    "=========================================================\n",
    "\n",
    "Another method that can be used to generate the mesh and that is more broadly used is to provide the boundary surfaces for the tissues.\n",
    "\n",
    "As for the generation from labels, we start by declaring the model and giving it a name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from shamo import FEM\n",
    "\n",
    "model = FEM(\"fem_from_surfaces_lc-default\", \"../../derivatives\")"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "First, we must create a dictionary containing the name of the tissues as keys and the corresponding path to the surface meshes as values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "data_path = Path(\"../../rawdata/surfaces\")\n",
    "tissues = {\n",
    "    f\"tissue_{i}\": data_path / f\"surfaces_tissue{i}.stl\" for i in range(1, 8)\n",
    "}"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Next, and this is the tricky part, we have to define how each surface is included in others. To do so, we create a nested list where each string represents a tissue and must be one of the keys of the previously instantiated dictionary.\n",
    "In this example, we consider a model with seven tissues and here is how it can be thought of:\n",
    "\n",
    "* Tissue 1 is the root.\n",
    "* Tissue 3 > Tissue 2 > Tissue 1\n",
    "* Tissue 5 > Tissue 4 > Tissue 1\n",
    "* Tissue 7 > Tissue 6 > Tissue 4 > Tissue 1\n",
    "\n",
    "In this configuration, the first tissue must englobe all the others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "structure = [\n",
    "    \"tissue_1\", [\n",
    "        [\"tissue_2\",\n",
    "            [\"tissue_3\"]\n",
    "        ],\n",
    "        [\"tissue_4\", [\n",
    "            [\"tissue_5\"],\n",
    "            [\"tissue_6\",\n",
    "                [\"tissue_7\"]\n",
    "            ]\n",
    "        ]]\n",
    "    ]\n",
    "]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Then, we can generate the mesh using the :py:func:`~shamo.FEM.mesh_from_surfaces` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.mesh_from_surfaces(tissues, structure)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "shamo",
   "language": "python",
   "name": "shamo"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
